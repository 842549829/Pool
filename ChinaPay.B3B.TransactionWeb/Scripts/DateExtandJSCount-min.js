(function () { Date.weeks = ["Sun", "Mon", "Tues", "Wed", "Thur", "Fri", "Sat"]; Date.fullWeeks = ["Sunday", "Monday", "Tuesday", "Wednesday ", "Thursday", "Friday", "Saturday"]; Date.chineseWeeks = ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]; Date.isDate = function (a) { return a && a instanceof Date }; Date.addPart = function (b, a, d) { if (b instanceof Date) { var c = { y: b.getFullYear(), M: b.getMonth(), d: b.getDate(), h: b.getHours(), m: b.getMinutes(), s: b.getSeconds(), f: b.getMilliseconds() }; if (a in c) { d = typeof d == "number" ? Math.floor(d) : 0; c[a] += d; return new Date(c.y, c.M, c.d, c.h, c.m, c.s, c.f) } } }; Date.prototype.addPart = function (a, b) { return Date.addPart(this, a, b) }; Date.isLeapYear = function (a) { if (typeof a == "number" && a > 0) { if ((a % 4) != 0) { return false } if ((a % 100) == 0) { return ((a % 400) == 0) } return true } }; Date.prototype.isLeapYear = function () { return Date.isLeapYear(this.getFullYear()) }; Date.getDays = function (a, b) { if (typeof a == "number" && typeof b == "number" && a > 0 && b > 0 && b < 13) { if (b == 2) { return Date.isLeapYear(a) ? 29 : 28 } if (b % 2 != 0) { return b > 7 ? 30 : 31 } else { return b > 6 ? 31 : 30 } } }; Date.prototype.getDays = function () { return Date.getDays(this.getFullYear(), this.getMonth() + 1) }; Date.format = function (c, a) { if (c instanceof Date) { if (typeof a != "string" || a == "") { return c.toLocaleString() } var d = { "M+": c.getMonth() + 1, "d+": c.getDate(), "h+": c.getHours(), "m+": c.getMinutes(), "s+": c.getSeconds(), "f+": c.getMilliseconds(), w: Date.weeks[c.getDay()], W: Date.fullWeeks[c.getDay()] }; if (/(y+)/.test(a)) { a = a.replace(RegExp.$1, (c.getFullYear() + "").substr(4 - RegExp.$1.length)) } for (var b in d) { if (new RegExp("(" + b + ")").test(a)) { if (b == "w" || b == "W") { a = a.replace(RegExp.$1, d[b]) } else { a = a.replace(RegExp.$1, RegExp.$1.length == 1 ? d[b] : ("00" + d[b]).substr(("" + d[b]).length)) } } } return a } }; Date.prototype.format = function (a) { return Date.format(this, a) }; Date.fromString = function (d) { if (/(\d{2,4})\-(\d{1,2})\-(\d{1,2})\s?((\d{1,2}):(\d{1,2}))?/.test(d)) { var b = +RegExp.$1; var c = +RegExp.$2; var a = +RegExp.$3; var e = +RegExp.$5; var f = +RegExp.$6; if (b < 100) { if (b < 50) { b += 2000 } else { b += 1900 } } if (c > 12) { return null } if (a > Date.getDays(b, c)) { return null } return new Date(b, c - 1, a, e || 0, f || 0) } return null }; Date.diff = function (d, c, b) { var a = { s: 1000, m: 60 * 1000, h: 60 * 1000 * 60, d: 24 * 60 * 1000 * 60, w: 7 * 24 * 60 * 1000 * 60, y: 365 * 24 * 60 * 60 * 1000 }; if (b in a) { var res = ((d - c) / a[b]); if (b == 'm') res -= 1; return res; } else { return d - c } }; Date.prototype.diff = function (a, b) { return Date.diff(this, a, b) } })();    function accMul(d, b) { var a = 0, f = d.toString(), c = b.toString(); try { a += f.split(".")[1].length } catch (g) { } try { a += c.split(".")[1].length } catch (g) { } return Number(f.replace(".", "")) * Number(c.replace(".", "")) / Math.pow(10, a) } Number.prototype.mul = function (a) { return accMul(a, this) }; function accMul(d, b) { var a = 0, f = d.toString(), c = b.toString(); try { a += f.split(".")[1].length } catch (g) { } try { a += c.split(".")[1].length } catch (g) { } return Number(f.replace(".", "")) * Number(c.replace(".", "")) / Math.pow(10, a) } Number.prototype.mul = function (a) { return accMul(a, this) }; function accDiv(arg1, arg2) { var t1 = 0, t2 = 0, r1, r2; try { t1 = arg1.toString().split(".")[1].length } catch (e) { } try { t2 = arg2.toString().split(".")[1].length } catch (e) { } with (Math) { r1 = Number(arg1.toString().replace(".", "")); r2 = Number(arg2.toString().replace(".", "")); return (r1 / r2) * pow(10, t2 - t1) } } Number.prototype.div = function (a) { return accDiv(this, a) }; function accDiv(arg1, arg2) { var t1 = 0, t2 = 0, r1, r2; try { t1 = arg1.toString().split(".")[1].length } catch (e) { } try { t2 = arg2.toString().split(".")[1].length } catch (e) { } with (Math) { r1 = Number(arg1.toString().replace(".", "")); r2 = Number(arg2.toString().replace(".", "")); return (r1 / r2) * pow(10, t2 - t1) } } Number.prototype.div = function (a) { return accDiv(this, a) };